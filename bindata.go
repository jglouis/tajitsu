// Code generated by go-bindata.
// sources:
// data/combat_card.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCombat_cardJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x96\xc1\x6e\x83\x30\x0c\x86\xef\x95\xfa\x0e\x51\xce\x79\x82\xdd\x26\x6d\x7b\x81\xee\x32\x55\x3d\x44\x69\x9a\x46\xab\x3c\x29\xcd\xc6\x61\xda\xbb\x2f\x20\x10\x10\xc0\x10\x07\xb6\x5e\x8a\xb0\x63\xc5\x9f\xfe\xdf\xe6\xc8\xd8\x7e\xc7\x18\xfb\xae\xff\xc3\x8f\xbf\x59\x38\x78\x09\x4a\xf3\x07\x7e\x00\xf9\xae\xb9\x68\x63\x12\xcc\x64\xf0\xf1\xfc\x25\xc1\x4b\x13\x62\xf0\x79\xbb\x89\x6e\xc5\xe7\xcb\x45\x2b\x5f\x1e\x2a\xac\x57\xd7\xba\x46\xbf\xf0\x6c\x8e\x85\x17\x0b\xf6\x7e\xd5\xae\x49\x3d\xb6\xf7\x2e\x33\x9e\x9c\x2c\x78\xf3\xe2\xd4\xaf\x9e\x74\xb4\x7a\xf8\x11\x28\x9b\x57\x6b\xb4\x23\xb0\x29\x8b\xf0\x51\x38\x11\xb5\x2e\x92\xea\x7a\x29\x28\x7a\x0c\x89\x48\xec\x5d\x49\x77\x4e\xa3\x12\x2e\x6a\x3e\x80\x84\x25\x24\x6e\xc5\x25\x43\x13\x62\x9e\xea\x12\x2e\xa8\x93\x06\xd0\x16\xc9\x65\x89\x97\x06\x46\x4c\x6e\x39\xd9\x53\xeb\x99\x08\xc7\xb2\xa1\x5c\x3a\xdd\xc7\x1e\xd8\x78\xa8\xe0\xf6\xc1\x80\x4c\x8f\xdc\xb8\xe9\xff\x04\x42\x19\x29\xa8\x75\x62\x01\x65\x4b\x84\xbe\x7c\xea\xde\x44\x2e\xae\xf5\x0c\x84\xc0\x41\xe4\x12\xf7\x11\x29\x66\x18\xfe\x8b\x65\x44\x9f\xbc\xb8\xa5\x50\xfd\x50\x16\x35\x01\x4f\xce\x67\xcb\xb8\xa1\xf6\xbb\xd3\x6f\x00\x00\x00\xff\xff\x8a\xdd\x81\x91\xdb\x09\x00\x00")

func dataCombat_cardJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCombat_cardJson,
		"data/combat_card.json",
	)
}

func dataCombat_cardJson() (*asset, error) {
	bytes, err := dataCombat_cardJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/combat_card.json", size: 2523, mode: os.FileMode(438), modTime: time.Unix(1467878287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/combat_card.json": dataCombat_cardJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"combat_card.json": &bintree{dataCombat_cardJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

